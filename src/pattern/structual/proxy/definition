代理模式
概念：代理模式意图是为其它对象提供一个代理或者占位符来控制对该对象的访问。

-- code --
		// 静态代理
//		AbsObj obj = new StaticProxyObj();
//		obj.operation();

		// 动态代理
		// 方式1
		Class cls = ProxyObj.class;
		IProxy iProxy = (IProxy) Proxy.newProxyInstance(cls.getClassLoader(), new Class[]{IProxy.class}, new InvocationHandler() {

			@Override
			public Object invoke(Object proxy, Method method, Object[] args)
					throws Throwable {
				System.out.println("Method：" + method);
				System.out.println("args：" + Arrays.asList(args));
				Object returnObj = method.invoke(cls.newInstance(), args);
				return returnObj;
			}
		});
		String str = iProxy.operation("Hello Proxy Pattern!");// 调用具体方法时才会回调invoke方法
		System.out.println("return：" + str);
		iProxy.operationArgs("No Return");
		new ProxyObj();
		// 方式2
//		RealObj realObj = new RealObj();
//		DynamicProxyObj handler = new DynamicProxyObj(realObj);
//		Class cls = realObj.getClass();
//		Class clz = Proxy.getProxyClass(cls.getClassLoader(), cls.getInterfaces());
//		Constructor constructor = clz.getConstructor(new Class[]{InvocationHandler.class});
//		IObj iObj2 = (IObj) constructor.newInstance(new Object[]{handler});
//		iObj2.operation();

		// 自己就是代理
//		Class clz = IProxy.class;
//		IProxy iProxy = (IProxy) Proxy.newProxyInstance(clz.getClassLoader(), new Class[]{clz}, new InvocationHandler() {
//
//			@Override
//			public Object invoke(Object proxy, Method method, Object[] args)
//					throws Throwable {
//				System.out.println("Method：" + method);
//				System.out.println("args：" + Arrays.asList(args));
//				return null;
//			}
//		});
//		String str = iProxy.operation("Hello Proxy Pattern!");
//		iProxy.operationArgs("No Return");

